{"ast":null,"code":"var _jsxFileName = \"/Users/mica/Projects/Websites/hyfix/frontend/src/pages/store/Cart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useCookies } from 'react-cookie';\nimport CartCard from '../../components/CartCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Cart = props => {\n  _s();\n\n  const [cookies] = useCookies(['userCart']);\n  const [items, setItems] = useState([]);\n  useEffect(() => {\n    let userCart = cookies.userCart;\n\n    if (userCart !== 'undefined') {\n      if (props.products) {\n        let productsInCart = props.products.filter(x => {\n          return cookies.userCart.includes(x.id);\n        });\n        let currentItems = productsInCart.map(current => {\n          return /*#__PURE__*/_jsxDEV(CartCard, {\n            product: current\n          }, current.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 28\n          }, this);\n        });\n        console.log('itms set!');\n        setItems(currentItems);\n      }\n    }\n  }, []);\n\n  if (items) {\n    return /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"products-page\",\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/store/checkout\",\n        className: \"button checkout-button\",\n        children: \"Checkout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"products-page\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-items\",\n        children: \"No Items in Cart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(Cart, \"WEQHO14lzwcp1vqx+0EinR2LhGQ=\", false, function () {\n  return [useCookies];\n});\n\n_c = Cart;\nexport default Cart;\n/*\n<div className='products-list'>\n                    {items}\n                </div>\n                <Link to='/store/checkout' className='button checkout-button'>Checkout</Link>\n*/\n\n/*\nimport { Link } from 'react-router-dom';\nimport { withCookies } from 'react-cookie';\nimport { getProductsInCart } from '../../api';\n\nclass Cart extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {  itemsChanged: false,\n                        itemsToGet: [],\n                        fetchedItems: [],\n                        renderedItems: [] };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        let cookies = props.cookies.get('userCart');\n        let itemsInCart;\n        if (cookies !== 'undefined') {\n            itemsInCart = cookies;\n        } else {\n            itemsInCart = false;\n        }\n\n        if (itemsInCart) {\n            if (state.itemsToGet.toString() !== itemsInCart.toString()) {\n                return { itemsChanged: true, itemsToGet: itemsInCart }\n            }\n        }\n\n        return null;\n       \n    }\n\n    componentDidMount() {\n        if (this.state.itemsChanged) {\n            this.setState({ itemsChanged: false});\n            this.fetchItems();\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.state.itemsChanged) {\n            this.setState({ itemsChanged: false});\n            this.fetchItems();\n        } \n        \n        if (this.state.fetchedItems) {\n            console.log(this.state.fetchedItems);\n            this.renderItems()\n        }\n    }\n\n    fetchItems = () => {\n        getProductsInCart(this.state.itemsToGet)\n        .then(products => this.setState({ fetchedItems: products }))\n        .catch(err => console.log(err))\n    }\n\n\n    renderItems = () => {\n        let newRenderedItems = this.state.fetchedItems.map(current => {\n            return <Item item={current} key={current._id}/>;\n        })\n\n        if (this.state.renderedItems.toString() !== newRenderedItems.toString()) {\n            this.setState({ renderedItems: newRenderedItems });\n        }\n        \n    }\n\n    render() {\n        console.log(props);\n        if (this.state.renderedItems.length > 0) {\n            return (\n                <main className='products-page'>\n                    <div className='products-list'>\n                        {this.state.renderedItems}\n                    </div>\n                    <Link to='/store/checkout' className='button checkout-button'>Checkout</Link>\n                </main>\n            );\n        } else {\n            return (\n                <main className='products-page'>\n                    <p className='no-items'>No Items in Cart</p>\n                </main>\n\n            )\n        }\n        \n    }\n}\n\nexport default withCookies(Cart);\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"Cart\");","map":{"version":3,"sources":["/Users/mica/Projects/Websites/hyfix/frontend/src/pages/store/Cart.js"],"names":["React","useEffect","useState","Link","useCookies","CartCard","Cart","props","cookies","items","setItems","userCart","products","productsInCart","filter","x","includes","id","currentItems","map","current","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,OAAOC,QAAP,MAAqB,2BAArB;;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AAAA;;AACpB,QAAM,CAACC,OAAD,IAAYJ,UAAU,CAAC,CAAC,UAAD,CAAD,CAA5B;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIU,QAAQ,GAAGH,OAAO,CAACG,QAAvB;;AAEA,QAAIA,QAAQ,KAAK,WAAjB,EAA8B;AAC1B,UAAIJ,KAAK,CAACK,QAAV,EAAoB;AAChB,YAAIC,cAAc,GAAGN,KAAK,CAACK,QAAN,CAAeE,MAAf,CAAsBC,CAAC,IAAI;AAC5C,iBAAOP,OAAO,CAACG,QAAR,CAAiBK,QAAjB,CAA0BD,CAAC,CAACE,EAA5B,CAAP;AACH,SAFoB,CAArB;AAIA,YAAIC,YAAY,GAAGL,cAAc,CAACM,GAAf,CAAmBC,OAAO,IAAI;AAC7C,8BAAO,QAAC,QAAD;AAAU,YAAA,OAAO,EAAEA;AAAnB,aAAiCA,OAAO,CAACH,EAAzC;AAAA;AAAA;AAAA;AAAA,kBAAP;AACH,SAFkB,CAAnB;AAIAI,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAZ,QAAAA,QAAQ,CAACQ,YAAD,CAAR;AACH;AACJ;AAEJ,GAlBQ,EAkBN,EAlBM,CAAT;;AAqBA,MAAIT,KAAJ,EAAW;AACP,wBACI;AAAM,MAAA,SAAS,EAAC,eAAhB;AAAA,6BACI,QAAC,IAAD;AAAM,QAAA,EAAE,EAAC,iBAAT;AAA2B,QAAA,SAAS,EAAC,wBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH,GAPD,MAOO;AACH,wBACI;AAAM,MAAA,SAAS,EAAC,eAAhB;AAAA,6BACI;AAAG,QAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;AACJ,CAvCD;;GAAMH,I;UACgBF,U;;;KADhBE,I;AAyCN,eAAeA,IAAfsourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useCookies } from 'react-cookie';\nimport CartCard from '../../components/CartCard';\n\nconst Cart = (props) => {\n    const [cookies] = useCookies(['userCart']);\n    const [items, setItems] = useState([]);\n\n    useEffect(() => {\n        let userCart = cookies.userCart;\n\n        if (userCart !== 'undefined') {\n            if (props.products) {\n                let productsInCart = props.products.filter(x => {\n                    return cookies.userCart.includes(x.id); \n                });\n\n                let currentItems = productsInCart.map(current => {\n                    return <CartCard product={current} key={current.id}/>\n                });\n\n                console.log('itms set!')\n                setItems(currentItems);\n            }\n        } \n\n    }, []);\n\n    \n    if (items) {\n        return (\n            <main className='products-page'>\n                <Link to='/store/checkout' className='button checkout-button'>Checkout</Link>\n                \n            </main>\n        )\n    } else {\n        return (\n            <main className='products-page'>\n                <p className='no-items'>No Items in Cart</p>\n            </main>\n        )\n    }\n}\n\nexport default Cart;\n\n/*\n<div className='products-list'>\n                    {items}\n                </div>\n                <Link to='/store/checkout' className='button checkout-button'>Checkout</Link>\n*/\n\n/*\nimport { Link } from 'react-router-dom';\nimport { withCookies } from 'react-cookie';\nimport { getProductsInCart } from '../../api';\n\nclass Cart extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {  itemsChanged: false,\n                        itemsToGet: [],\n                        fetchedItems: [],\n                        renderedItems: [] };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        let cookies = props.cookies.get('userCart');\n        let itemsInCart;\n        if (cookies !== 'undefined') {\n            itemsInCart = cookies;\n        } else {\n            itemsInCart = false;\n        }\n\n        if (itemsInCart) {\n            if (state.itemsToGet.toString() !== itemsInCart.toString()) {\n                return { itemsChanged: true, itemsToGet: itemsInCart }\n            }\n        }\n\n        return null;\n       \n    }\n\n    componentDidMount() {\n        if (this.state.itemsChanged) {\n            this.setState({ itemsChanged: false});\n            this.fetchItems();\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.state.itemsChanged) {\n            this.setState({ itemsChanged: false});\n            this.fetchItems();\n        } \n        \n        if (this.state.fetchedItems) {\n            console.log(this.state.fetchedItems);\n            this.renderItems()\n        }\n    }\n\n    fetchItems = () => {\n        getProductsInCart(this.state.itemsToGet)\n        .then(products => this.setState({ fetchedItems: products }))\n        .catch(err => console.log(err))\n    }\n\n\n    renderItems = () => {\n        let newRenderedItems = this.state.fetchedItems.map(current => {\n            return <Item item={current} key={current._id}/>;\n        })\n\n        if (this.state.renderedItems.toString() !== newRenderedItems.toString()) {\n            this.setState({ renderedItems: newRenderedItems });\n        }\n        \n    }\n\n    render() {\n        console.log(props);\n        if (this.state.renderedItems.length > 0) {\n            return (\n                <main className='products-page'>\n                    <div className='products-list'>\n                        {this.state.renderedItems}\n                    </div>\n                    <Link to='/store/checkout' className='button checkout-button'>Checkout</Link>\n                </main>\n            );\n        } else {\n            return (\n                <main className='products-page'>\n                    <p className='no-items'>No Items in Cart</p>\n                </main>\n\n            )\n        }\n        \n    }\n}\n\nexport default withCookies(Cart);\n*/\n "]},"metadata":{},"sourceType":"module"}